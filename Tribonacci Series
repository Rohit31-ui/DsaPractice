import java.util.*;

public class Tribonacci{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();

        //tabulation
        // int[] dp=new int[n+1];
        // dp[0]=0;
        // dp[1]=1;
        // dp[2]=1;

        // for(int i=3;i<=n;i++){
        //     dp[i]=dp[i-1]+dp[i-2]+dp[i-3];
        // }

        //int res=dp[n];

        int res=tribo(n);

        System.out.println(res);
    }

    //recursive
    // public static int tribo(int n){
    //     if(n==0) return 0;
    //     if(n==1 || n==2) return 1;

    //     return tribo(n-1)+tribo(n-2)+tribo(n-3);
    // }


    //memoised
    // public static int tribo(int n,int[] dp){
    //     if(n==0) return 0;
    //     if(n==1 || n==2) return 1;

    //     if(dp[n]!=-1) return dp[n];

    //     return dp[n] = tribo(n-1,dp)+tribo(n-2,dp)+tribo(n-3,dp);
    // }

    //space optimsed
    public static int tribo(int n){
        if(n==0) return 0;
        if(n==1 || n==2) return 1;

        int prev2=0, prev1=1,prev=1;

        for(int i=3;i<=n;i++){
            int curr=prev2+prev1+prev;
            prev2=prev1;
            prev1=prev;
            prev=curr;
        }

        return prev;
    }



}

/*

Tribonnaci Programmer - It is known as bada bhai of fibonacci
To solve this problem we have used 
1. recurive approach O(3^n) time and O(n) space
2.Memoisation approach O(n) time and O(2n) space
3.Tabulation approach O(n) time and O(n) space
4.Space Optimised approach time O(n) and space also O(n)


*/


